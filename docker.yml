---
- hosts: docker
  become: yes

  vars:
    resolv_searchpath: "{{ dns_resolv_searchpath }}"
    resolv_dns_server: "{{ dns_server_list }}"
    save_hosts: "{{ etc_save_hosts }}"

  tasks:

  - name: set timezone to "{{timezone}}"
    timezone:
      name: "{{timezone}}"
    tags:
      - prep

  - name: Installs or updates python3 and pip3 , due to compatibility and upgrade needs
    apt:
      # the python3-lxml is needed for the lrk.flyway role, which is not being correctly installed by the role
      name: ['python3','python3-pip','python3-lxml']
      state: latest
      install_recommends: yes
    tags:
      - prep
      - updates
     
  - name: Installs software-properties-common for Docker
    apt:
      name: ['apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common']
      state: latest
      update_cache: yes
    tags:
      - prep

  - name: Add GPG key for Docker
    apt_key:
      url: "https://download.docker.com/linux/ubuntu/gpg"
      state: present
    tags:
       - prep

  - apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present
    tags:
      - prep

  - name: Update APT-GET cache again, removes useless packages and remove dependencies that are no longer required
    apt: 
      update_cache: yes
      autoclean: yes
      autoremove: yes
    tags:
      - prep
      - updates

  - name: Make sure we have a 'docker' group
    group:
      name: docker
      state: present
    tags:
      - prep

  - name: Create the 'docker' user
    user:
      name: "{{ansible_ssh_user}}"
      group: docker
      append: yes
    tags:
      - prep

  - name: Make sure we have a 'docker' group
    group:
      name: docker
      state: present
    tags:
      - prep

  - name: Add current user to Docker group
    user:
      name: "{{ansible_ssh_user}}"
      group: docker
      append: yes
    tags:
       - prep

  - name: Uninstalls Docker-py library for Python (used by ansible)
    shell: "pip3 uninstall docker-py -y"
    ignore_errors: yes
    tags:
      - prep
      - deploy
      - updates

  - name: Installs Docker library for Python (used by ansible)
    pip:
      executable: /usr/bin/pip3
      name: docker
      state: latest
    tags:
      - prep
      - deploy
      - updates

  - name: Installs Docker-Compose library for Python (used by ansible)
    pip:
      executable: /usr/bin/pip3
      name: docker-compose
      state: latest
    tags:
      - prep
      - deploy
      - updates

  - name: Uninstall docker-ce-cli 
    # This task is needed to force uninstalling thr Docker's CLI package as it can be sometimes installed in a different version, causing conflicts
    apt:
      name: docker-ce-cli
      state: absent
      force: true
    tags:
      - prep
      - deploy

  - name: Install docker and docker-compose 
    apt:
      name: ['docker-ce={{ docker_ce_version }}','docker-compose']
      state: present
      force: true
      # This following option is needed in case of having accidentaly installed a higher version of Docker, incompatible to the certified one for eFiling 
      dpkg_options: force-downgrade
    tags:
      - prep
      - deploy

  - name: Install GIT
    apt:
      name: git
      state: present
      update_cache: yes
    tags:
       - prep

  - name: Enable Journald persistence
    ini_file:
      dest: "/etc/systemd/journald.conf"
      section: Journal
      option: Storage
      value: "persistent"
    register: enable_journald_persistence
    tags:
       - prep
       - log

  - name: Restart Journald service
    service:
      name: systemd-journald
      state: restarted
    when: enable_journald_persistence.changed
    tags:
       - prep
       - log

  - name: Set Docker log driver
    template:
      src: ../templates/daemon.json.j2
      dest: "/etc/docker/daemon.json"
    when: docker_log_driver is defined
    register: set_docker_log_driver
    tags:
       - prep
       - log

  - name: Restart Docker service
    service:
      name: docker
      state: restarted
    when: set_docker_log_driver.changed
    tags:
       - prep
       - log

  - name: Install PIP
    apt:
      name: python-pip
      state: present
      update_cache: yes
    tags:
       - prep

  - name: Install PIP Prerequisites
    apt: name={{ item }} state=latest
    with_items:
      - libpq-dev
      - python-psycopg2
    tags:
      - prep
      - pip

  - name: Install Docker Compose
    pip:
      executable: /usr/bin/pip3
      name: docker-compose
       version: "{{ docker_compose_version if docker_compose_version else omit }}"
       state: present
    tags:
       - prep
       - docker-login

  - name: Log into Sogema JFrog Docker registry for current user
    docker_login:
      registry: "{{docker_registry}}"
      username: "{{docker_user}}"
      password: "{{docker_pwd}}"
      email: "{{docker_email}}"
    tags:
       - prep
       - docker-login

  - name: Log into Sogema JFrog Docker registry for '{{ansible_ssh_user}}' user
    docker_login:
      config_path: "/home/{{ansible_ssh_user}}/.docker/config.json"
      registry: "{{docker_registry}}"
      username: "{{docker_user}}"
      password: "{{docker_pwd}}"
      email: "{{docker_email}}"
    tags:
       - prep
       - docker-login

  - name: install nfs-common
    apt:
      pkg: nfs-common
    tags:
      - nfs
      - db

  - name: Upload docker-compose file
    template:
      src: ../templates/docker-compose.yml.j2
      dest: "/home/{{ansible_ssh_user}}/docker-compose.yml"
      owner: "{{ansible_ssh_user}}"
      group: docker
      mode: "u=rw,g=rw,o=r"
    tags:
       - prep
       - docker-compose
       - deploy

  - name: Run the 'down' command for Docker Compose
    docker_service:
      project_name: "{{ansible_ssh_user}}"
      project_src: /home/{{ansible_ssh_user}}
      state: absent
    tags:
       - deploy

  - name: Run the 'up' command for Docker Compose
    docker_service:
      project_name: "{{ansible_ssh_user}}"
      project_src: /home/{{ansible_ssh_user}}
      state: present
      pull: "{{ pull_images if pull_images else omit }}"
      services: "{{ available_docker_services }}"
    tags:
       - deploy


  roles:
    - { role: soplakanets.hosts }
    - { role: ypsman.resolv }

